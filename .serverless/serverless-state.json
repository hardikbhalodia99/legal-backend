{
  "service": {
    "service": "legal-backend",
    "serviceObject": {
      "name": "legal-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "stage": "staging",
      "region": "ap-south-1",
      "environment": {
        "APP_ENV": "staging",
        "DB_USERNAME": "legal_user",
        "DB_PASSWORD": "legal_user",
        "DB_NAME": "legal_staging",
        "DB_HOST": "legal-db.cggmsqfhilnb.ap-south-1.rds.amazonaws.com",
        "MONGO_URI": "mongodb+srv://legal_user:legal_user@legal-staging.xybzslw.mongodb.net",
        "APPWRITE_PROJECT_ID": "64bb9b3e2162e6d40866",
        "APPWRITE_ENDPOINT": "https://cloud.appwrite.io/v1",
        "APPWRITE_SERVER_API_KEY": "14d73d0c8e5a28e5b63bbf27cac2679a716c6c74c75267d82c7896e9f5e1948563c239b9e2338a173329b1c25ce8005143eec6bbb1b1ccf6d9516ff75f68c4de522de5e08778340a5ed71d99c525be8d6cddc1ab229b45e2912576876afe46cdb0472f78ee063bae718bbc585571402c3ff63c7d0f91b2f343cb4f9d36e6f50b",
        "RAZORPAY_WEBHOOK_SECRET": "0FlW4wtE66KcaaeohKDFsdyxHzYQ9uxm"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "MainLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/legal-backend-staging-main"
            }
          },
          "RazorpayEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/legal-backend-staging-razorpayEvents"
            }
          },
          "MessageQueueLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/legal-backend-staging-messageQueue"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "legal-backend",
                        "staging",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/legal-backend-staging*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/legal-backend-staging*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          "arn:aws:sqs:ap-south-1:737712331834:legal-staging.fifo"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "legal-backend",
                    "staging",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "MainLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/legal-backend/staging/1691240343062-2023-08-05T12:59:03.062Z/legal-backend.zip"
              },
              "Handler": "index.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "legal-backend-staging-main",
              "MemorySize": 512,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "APP_ENV": "staging",
                  "DB_USERNAME": "legal_user",
                  "DB_PASSWORD": "legal_user",
                  "DB_NAME": "legal_staging",
                  "DB_HOST": "legal-db.cggmsqfhilnb.ap-south-1.rds.amazonaws.com",
                  "MONGO_URI": "mongodb+srv://legal_user:legal_user@legal-staging.xybzslw.mongodb.net",
                  "APPWRITE_PROJECT_ID": "64bb9b3e2162e6d40866",
                  "APPWRITE_ENDPOINT": "https://cloud.appwrite.io/v1",
                  "APPWRITE_SERVER_API_KEY": "14d73d0c8e5a28e5b63bbf27cac2679a716c6c74c75267d82c7896e9f5e1948563c239b9e2338a173329b1c25ce8005143eec6bbb1b1ccf6d9516ff75f68c4de522de5e08778340a5ed71d99c525be8d6cddc1ab229b45e2912576876afe46cdb0472f78ee063bae718bbc585571402c3ff63c7d0f91b2f343cb4f9d36e6f50b",
                  "RAZORPAY_WEBHOOK_SECRET": "0FlW4wtE66KcaaeohKDFsdyxHzYQ9uxm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MainLogGroup"
            ]
          },
          "RazorpayEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/legal-backend/staging/1691240343062-2023-08-05T12:59:03.062Z/legal-backend.zip"
              },
              "Handler": "razorpayEvents.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "legal-backend-staging-razorpayEvents",
              "MemorySize": 512,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "APP_ENV": "staging",
                  "DB_USERNAME": "legal_user",
                  "DB_PASSWORD": "legal_user",
                  "DB_NAME": "legal_staging",
                  "DB_HOST": "legal-db.cggmsqfhilnb.ap-south-1.rds.amazonaws.com",
                  "MONGO_URI": "mongodb+srv://legal_user:legal_user@legal-staging.xybzslw.mongodb.net",
                  "APPWRITE_PROJECT_ID": "64bb9b3e2162e6d40866",
                  "APPWRITE_ENDPOINT": "https://cloud.appwrite.io/v1",
                  "APPWRITE_SERVER_API_KEY": "14d73d0c8e5a28e5b63bbf27cac2679a716c6c74c75267d82c7896e9f5e1948563c239b9e2338a173329b1c25ce8005143eec6bbb1b1ccf6d9516ff75f68c4de522de5e08778340a5ed71d99c525be8d6cddc1ab229b45e2912576876afe46cdb0472f78ee063bae718bbc585571402c3ff63c7d0f91b2f343cb4f9d36e6f50b",
                  "RAZORPAY_WEBHOOK_SECRET": "0FlW4wtE66KcaaeohKDFsdyxHzYQ9uxm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RazorpayEventsLogGroup"
            ]
          },
          "MessageQueueLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/legal-backend/staging/1691240343062-2023-08-05T12:59:03.062Z/legal-backend.zip"
              },
              "Handler": "sqs.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "legal-backend-staging-messageQueue",
              "MemorySize": 512,
              "Timeout": 900,
              "Environment": {
                "Variables": {
                  "APP_ENV": "staging",
                  "DB_USERNAME": "legal_user",
                  "DB_PASSWORD": "legal_user",
                  "DB_NAME": "legal_staging",
                  "DB_HOST": "legal-db.cggmsqfhilnb.ap-south-1.rds.amazonaws.com",
                  "MONGO_URI": "mongodb+srv://legal_user:legal_user@legal-staging.xybzslw.mongodb.net",
                  "APPWRITE_PROJECT_ID": "64bb9b3e2162e6d40866",
                  "APPWRITE_ENDPOINT": "https://cloud.appwrite.io/v1",
                  "APPWRITE_SERVER_API_KEY": "14d73d0c8e5a28e5b63bbf27cac2679a716c6c74c75267d82c7896e9f5e1948563c239b9e2338a173329b1c25ce8005143eec6bbb1b1ccf6d9516ff75f68c4de522de5e08778340a5ed71d99c525be8d6cddc1ab229b45e2912576876afe46cdb0472f78ee063bae718bbc585571402c3ff63c7d0f91b2f343cb4f9d36e6f50b",
                  "RAZORPAY_WEBHOOK_SECRET": "0FlW4wtE66KcaaeohKDFsdyxHzYQ9uxm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MessageQueueLogGroup"
            ]
          },
          "MainLambdaVersionYe4mjXAm8mJrwbzICsbvwj5GeGV8tCSRHZuutuxyQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MainLambdaFunction"
              },
              "CodeSha256": "t9Lgz/4B1Z2OnPpWxfNu8JCtv/XtY/BTpqmMtap0Spo="
            }
          },
          "RazorpayEventsLambdaVersionPlh0hTpfX0ELanMnO7XbKElxXLFc3DKQw48IvxIgsE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RazorpayEventsLambdaFunction"
              },
              "CodeSha256": "t9Lgz/4B1Z2OnPpWxfNu8JCtv/XtY/BTpqmMtap0Spo="
            }
          },
          "MessageQueueLambdaVersionYmHlpCUp24TJvV1c0glaIkmxhULCuZ5nChIfGoYzxs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MessageQueueLambdaFunction"
              },
              "CodeSha256": "t9Lgz/4B1Z2OnPpWxfNu8JCtv/XtY/BTpqmMtap0Spo="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "staging-legal-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWebhooks": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "webhooks",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWebhooksRazorpay": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWebhooks"
              },
              "PathPart": "razorpay",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MainLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MainLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MainLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MainLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWebhooksRazorpayAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWebhooksRazorpay"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RazorpayEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RazorpayEventsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1691240325085": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "staging"
            },
            "DependsOn": [
              "ApiGatewayMethodAny",
              "ApiGatewayMethodProxyVarAny",
              "ApiGatewayMethodWebhooksRazorpayAny"
            ]
          },
          "MainLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MainLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RazorpayEventsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RazorpayEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MessageQueueEventSourceMappingSQSLegalstagingfifo": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": "arn:aws:sqs:ap-south-1:737712331834:legal-staging.fifo",
              "FunctionName": {
                "Fn::GetAtt": [
                  "MessageQueueLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-legal-backend-staging-ServerlessDeploymentBucketName"
            }
          },
          "MainLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MainLambdaVersionYe4mjXAm8mJrwbzICsbvwj5GeGV8tCSRHZuutuxyQ"
            },
            "Export": {
              "Name": "sls-legal-backend-staging-MainLambdaFunctionQualifiedArn"
            }
          },
          "RazorpayEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RazorpayEventsLambdaVersionPlh0hTpfX0ELanMnO7XbKElxXLFc3DKQw48IvxIgsE"
            },
            "Export": {
              "Name": "sls-legal-backend-staging-RazorpayEventsLambdaFunctionQualifiedArn"
            }
          },
          "MessageQueueLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MessageQueueLambdaVersionYmHlpCUp24TJvV1c0glaIkmxhULCuZ5nChIfGoYzxs"
            },
            "Export": {
              "Name": "sls-legal-backend-staging-MessageQueueLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/staging"
                ]
              ]
            },
            "Export": {
              "Name": "sls-legal-backend-staging-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-prune-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "main": {
        "handler": "index.handler",
        "memorySize": 512,
        "timeout": 30,
        "events": [
          {
            "http": {
              "method": "any",
              "path": "",
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "method": "any",
              "path": "{proxy+}",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "legal-backend-staging-main",
        "package": {},
        "memory": 512,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "MainLambdaVersionYe4mjXAm8mJrwbzICsbvwj5GeGV8tCSRHZuutuxyQ"
      },
      "razorpayEvents": {
        "handler": "razorpayEvents.handler",
        "memorySize": 512,
        "timeout": 30,
        "events": [
          {
            "http": {
              "method": "any",
              "path": "webhooks/razorpay",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "legal-backend-staging-razorpayEvents",
        "package": {},
        "memory": 512,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "RazorpayEventsLambdaVersionPlh0hTpfX0ELanMnO7XbKElxXLFc3DKQw48IvxIgsE"
      },
      "messageQueue": {
        "handler": "sqs.handler",
        "memorySize": 512,
        "timeout": 900,
        "events": [
          {
            "sqs": {
              "arn": "arn:aws:sqs:ap-south-1:737712331834:legal-staging.fifo"
            }
          }
        ],
        "name": "legal-backend-staging-messageQueue",
        "package": {},
        "memory": 512,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "MessageQueueLambdaVersionYmHlpCUp24TJvV1c0glaIkmxhULCuZ5nChIfGoYzxs"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "legal-backend",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/home/hardik/public_html/Legal/legal-backend/.serverless/legal-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/legal-backend/staging/1691240343062-2023-08-05T12:59:03.062Z",
    "artifact": "legal-backend.zip"
  }
}